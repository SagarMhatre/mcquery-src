# Note : terraform init - downloads the AWS provider of the specific version and creates a .terraform.lock.hcl file, 
# which contains the information about all the dependencies and their hashes. 
# .terraform.lock.hcl is to be checked into the git repo

# Note :  Terraform init command also creates a .terraform folder where the actual dependency is installed
# This folder is not checked into the git repo
# Local .terraform directories
**/.terraform/*

# Note : The state stores information about the instance ID, network interface ID, and much more details 
# that are required when modifications are to be made to this server or to destroy this instance.
# When the resource needs to be destroyed or any new resource needs to be added,
# Terraform will first reference the terraform.state file and provide information about what is going to change. 
# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log

# Ignore any .tfvars files that are generated automatically for each Terraform run. Most
# .tfvars files are managed as part of configuration and so should be included in
# version control.
#
# example.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc
terraform

ssh/keys
ssh/keys.pub

archive